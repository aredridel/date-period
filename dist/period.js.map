{"version":3,"sources":["../src/period.js"],"names":[],"mappings":"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","file":"period.js","sourcesContent":["'use strict';\n\nimport createDuration from 'date-duration';\n\nlet filterDate = (date) => {\n  if (typeof date.toDate === 'function') {\n    date = date.toDate();\n  }\n\n  if (Object.prototype.toString.call(date) !== '[object Date]') {\n    throw new Error('Invalid date');\n  }\n\n  return new Date(+date);\n};\n\nexport default function createPeriod (spec) {\n  let {start, duration, end, recurrence} = spec;\n\n  if (spec.iso) {\n    if (typeof spec.iso !== 'string' || spec.iso[0] !== 'R') {\n      throw new Error('Invalid ISO interval');\n    }\n\n    let iso = spec.iso.split(/\\//);\n\n    start = new Date(iso[1]);\n    duration = iso[2];\n    recurrence = parseInt(iso[0].substr(1), 10);\n  }\n\n  start = filterDate(start);\n\n  if (typeof duration === 'object' && typeof duration.toString === 'function') {\n    duration = duration.toString();\n  }\n\n  if (typeof duration !== 'string' || duration[0] !== 'P') {\n    throw new Error('Invalid duration');\n  }\n\n  duration = createDuration(duration);\n\n  if (end) {\n    end = filterDate(end);\n  } else if (recurrence) {\n    if (typeof recurrence !== 'number') {\n      throw new Error('Invalid number of recurrences');\n    }\n  } else {\n    throw new Error('Invalid parameters, missing end or number of recurrences');\n  }\n\n  if (end && start >= end) {\n    throw new Error('Invalid parameters, end needs to be after start');\n  }\n\n  let period = {\n    *[Symbol.iterator] () {\n      let date = new Date(+start);\n\n      if (end) {\n        while (date < end) {\n          yield new Date(+date);\n          date = duration.addTo(date);\n        }\n      } else {\n        for (let i = 0; i <= recurrence; i++) {\n          yield new Date(+date);\n          date = duration.addTo(date);\n        }\n      }\n    },\n    toArray: () => {\n      return Array.from(period);\n    },\n    toString: () => {\n      let result = period.toArray();\n\n      return `R${result.length - 1}/${start.toISOString()}/${duration}`;\n    }\n  };\n\n  return Object.freeze(period);\n}\n"]}