{"version":3,"sources":["../src/period.js"],"names":[],"mappings":"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","file":"period.js","sourcesContent":["'use strict';\n\nimport Duration from './duration';\n\nlet filters = {\n  date: (date) => {\n    if (typeof date.toDate === 'function') {\n      date = date.toDate();\n    }\n\n    if (Object.prototype.toString.call(date) !== '[object Date]') {\n      throw new Error('Invalid date');\n    }\n\n    return new Date(+date);\n  },\n  duration: (duration) => {\n    if (typeof duration === 'object' && typeof duration.toString === 'function') {\n      duration = duration.toString();\n    }\n\n    if (typeof duration !== 'string' || duration[0] !== 'P') {\n      throw new Error('Invalid duration');\n    }\n\n    return duration;\n  },\n  interval: (interval) => {\n    if (typeof interval !== 'string' || interval[0] !== 'R') {\n      throw new Error('Invalid interval');\n    }\n\n    return interval;\n  },\n  number: (number) => {\n    if (typeof number !== 'number') {\n      throw new Error('Invalid number');\n    }\n\n    return number;\n  }\n};\n\nlet dateMethods = new Map([\n    ['year', 'FullYear'],\n    ['month', 'Month'],\n    ['day', 'Date'],\n    ['hour', 'Hours'],\n    ['minute', 'Minutes'],\n    ['second', 'Seconds']\n  ]),\n  add = (date, duration) => {\n    for (let [key, methodName] of dateMethods) {\n      if (duration[key]) {\n        date['set' + methodName](date['get' + methodName]() + duration[key]);\n      }\n    }\n  };\n\n/**\n * Period class.\n */\nexport default class Period {\n  /**\n   * @param {date|string} start - Start date or ISO 8601 repeating interval.\n   * @param {string} duration - ISO 8601 duration.\n   * @param {date|number} end - End date or number of recurrences.\n   */\n  constructor(start, duration, end) {\n    this.length = 0;\n\n    try {\n      start = filters.date(start);\n    } catch (startException) {\n      try {\n        let interval = filters.interval(start).split(/\\//);\n\n        start = new Date(interval[1]);\n        duration = interval[2];\n        end = parseInt(interval[0].substr(1), 10);\n      } catch (intervalException) {\n        throw new Error('First argument should either be a date or interval');\n      }\n    }\n\n    try {\n      duration = filters.duration(duration);\n    } catch (durationException) {\n      throw new Error(`${duration} is not a valid duration`);\n    }\n\n    this.duration = duration = new Duration(duration);\n\n    try {\n      end = filters.date(end);\n    } catch (endException) {\n      try {\n        end = filters.number(end);\n\n        let rec = end;\n        end = new Date(+start);\n        for (let i = 0; i < rec; i++) {\n          add(end, duration);\n        }\n\n        add(end, duration); // includes end in results\n      } catch (recurrenceException) {\n        throw new Error('Third argument should either be a number or date');\n      }\n    }\n\n    if (start >= end) {\n      throw new Error('Invalid parameters, start needs to be before end');\n    }\n\n    let date = new Date(+start);\n\n    while (date < end) {\n      this[this.length++] = new Date(+date);\n      add(date, duration);\n    }\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    let recurrence = this.length - 1,\n      duration = this.duration;\n\n    let pad = (number) => {\n      if (number < 10) {\n        return '0' + number;\n      }\n\n      return number;\n    };\n\n    let start = this[0].getUTCFullYear() +\n        '-' + pad(this[0].getUTCMonth() + 1) +\n        '-' + pad(this[0].getUTCDate()) +\n        'T' + pad(this[0].getUTCHours()) +\n        ':' + pad(this[0].getUTCMinutes()) +\n        ':' + pad(this[0].getUTCSeconds()) +\n        'Z';\n\n    return `R${recurrence}/${start}/${duration}`;\n  }\n}\n"]}